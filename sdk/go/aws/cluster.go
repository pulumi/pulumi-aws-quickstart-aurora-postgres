// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZoneNames == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZoneNames'")
	}
	if args.DbMasterPassword == nil {
		return nil, errors.New("invalid value for required argument 'DbMasterPassword'")
	}
	if args.PrivateSubnetID1 == nil {
		return nil, errors.New("invalid value for required argument 'PrivateSubnetID1'")
	}
	if args.PrivateSubnetID2 == nil {
		return nil, errors.New("invalid value for required argument 'PrivateSubnetID2'")
	}
	if args.VpcID == nil {
		return nil, errors.New("invalid value for required argument 'VpcID'")
	}
	var resource Cluster
	err := ctx.RegisterRemoteComponentResource("aws-quickstart-aurora-postgres:index:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type clusterArgs struct {
	// List of Availability Zone names to use to create the DB Cluster.
	AvailabilityZoneNames []string `pulumi:"availabilityZoneNames"`
	// Set this parameter to true if you want to enable your DB
	// instances to receive minor DB engine version upgrades
	// automatically when upgrades become available.
	DbAutoMinorVersionUpgrade *bool `pulumi:"dbAutoMinorVersionUpgrade"`
	// The number of days to retain automatic database snapshots.
	// To disable automatic backups, set this parameter to 0. Default is 35 days
	DbBackupRetentionPeriod *int `pulumi:"dbBackupRetentionPeriod"`
	// Set this parameter to false if you don’t want to encrypt the
	// database at rest. Defaults to `true`.
	DbEncryptedEnabled *bool `pulumi:"dbEncryptedEnabled"`
	// The version of the database engine.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The DB (compute and memory capacity) class for the database
	// instances.
	DbInstanceClass string `pulumi:"dbInstanceClass"`
	// The password for the database administrator account (8-64
	// character string)
	DbMasterPassword string `pulumi:"dbMasterPassword"`
	// The user name for the database administrator account. This is
	// an alphanumeric string of 1-16 characters. The user name
	// must start with an uppercase or lowercase letter (A-Z, a-z).
	DbMasterUsername string `pulumi:"dbMasterUsername"`
	// The name of the Aurora DB to provision. This is an
	// alphanumeric string of 5-64 characters.
	DbName string `pulumi:"dbName"`
	// The number of db instances to launch as part of the cluster. Defaults to 1.
	DbNumDbClusterInstances *int `pulumi:"dbNumDbClusterInstances"`
	// The family of the DB parameter group (e.g. aurora-postgresql11).
	DbParameterGroupFamily string `pulumi:"dbParameterGroupFamily"`
	// The port that you want to access the database through. The DB
	// instance will listen on this port for connections. This value
	// must be in the range 1115-65535. Default is 5432
	DbPort *float64 `pulumi:"dbPort"`
	// The ID of the custom security group you want to use in your
	// existing VPC (e.g., sg-7f16e910).
	DbSecurityGroupID *string `pulumi:"dbSecurityGroupID"`
	// Set this parameter to `false` if you want to disable Amazon
	// Aurora Cluster and Instance level event subscriptions. You
	// might want to disable it if you are testing or running
	// continuous integration (CI) processes.
	EnableEventSubscription *bool `pulumi:"enableEventSubscription"`
	// The ID of the private subnet in Availability Zone 1 in your
	// existing VPC (e.g., subnet-a0246dcd).
	PrivateSubnetID1 string `pulumi:"privateSubnetID1"`
	// The ID of the private subnet in Availability Zone 2 in your
	// existing VPC (e.g., subnet-b58c3d67).
	PrivateSubnetID2 string `pulumi:"privateSubnetID2"`
	// The email that is used to configure an SNS topic for sending
	// CloudWatch alarms and Amazon RDS event notifications. This
	// must be a valid email address. Required if enableEventSubscription is true.
	SnsNotificationEmail *string `pulumi:"snsNotificationEmail"`
	// The ID of your existing VPC (e.g., vpc-0343606e) where you
	// want to deploy the Aurora database.
	VpcID string `pulumi:"vpcID"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// List of Availability Zone names to use to create the DB Cluster.
	AvailabilityZoneNames []pulumi.StringInput
	// Set this parameter to true if you want to enable your DB
	// instances to receive minor DB engine version upgrades
	// automatically when upgrades become available.
	DbAutoMinorVersionUpgrade *bool
	// The number of days to retain automatic database snapshots.
	// To disable automatic backups, set this parameter to 0. Default is 35 days
	DbBackupRetentionPeriod *int
	// Set this parameter to false if you don’t want to encrypt the
	// database at rest. Defaults to `true`.
	DbEncryptedEnabled *bool
	// The version of the database engine.
	DbEngineVersion string
	// The DB (compute and memory capacity) class for the database
	// instances.
	DbInstanceClass string
	// The password for the database administrator account (8-64
	// character string)
	DbMasterPassword pulumi.StringInput
	// The user name for the database administrator account. This is
	// an alphanumeric string of 1-16 characters. The user name
	// must start with an uppercase or lowercase letter (A-Z, a-z).
	DbMasterUsername string
	// The name of the Aurora DB to provision. This is an
	// alphanumeric string of 5-64 characters.
	DbName string
	// The number of db instances to launch as part of the cluster. Defaults to 1.
	DbNumDbClusterInstances *int
	// The family of the DB parameter group (e.g. aurora-postgresql11).
	DbParameterGroupFamily string
	// The port that you want to access the database through. The DB
	// instance will listen on this port for connections. This value
	// must be in the range 1115-65535. Default is 5432
	DbPort *float64
	// The ID of the custom security group you want to use in your
	// existing VPC (e.g., sg-7f16e910).
	DbSecurityGroupID pulumi.StringPtrInput
	// Set this parameter to `false` if you want to disable Amazon
	// Aurora Cluster and Instance level event subscriptions. You
	// might want to disable it if you are testing or running
	// continuous integration (CI) processes.
	EnableEventSubscription *bool
	// The ID of the private subnet in Availability Zone 1 in your
	// existing VPC (e.g., subnet-a0246dcd).
	PrivateSubnetID1 pulumi.StringInput
	// The ID of the private subnet in Availability Zone 2 in your
	// existing VPC (e.g., subnet-b58c3d67).
	PrivateSubnetID2 pulumi.StringInput
	// The email that is used to configure an SNS topic for sending
	// CloudWatch alarms and Amazon RDS event notifications. This
	// must be a valid email address. Required if enableEventSubscription is true.
	SnsNotificationEmail *string
	// The ID of your existing VPC (e.g., vpc-0343606e) where you
	// want to deploy the Aurora database.
	VpcID pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

func (i *Cluster) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

type ClusterPtrInput interface {
	pulumi.Input

	ToClusterPtrOutput() ClusterPtrOutput
	ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput
}

type clusterPtrType ClusterArgs

func (*clusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (i *clusterPtrType) ToClusterPtrOutput() ClusterPtrOutput {
	return i.ToClusterPtrOutputWithContext(context.Background())
}

func (i *clusterPtrType) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPtrOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//          ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//          ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cluster)(nil))
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o.ToClusterPtrOutputWithContext(context.Background())
}

func (o ClusterOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cluster) *Cluster {
		return &v
	}).(ClusterPtrOutput)
}

type ClusterPtrOutput struct{ *pulumi.OutputState }

func (ClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil))
}

func (o ClusterPtrOutput) ToClusterPtrOutput() ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) ToClusterPtrOutputWithContext(ctx context.Context) ClusterPtrOutput {
	return o
}

func (o ClusterPtrOutput) Elem() ClusterOutput {
	return o.ApplyT(func(v *Cluster) Cluster {
		if v != nil {
			return *v
		}
		var ret Cluster
		return ret
	}).(ClusterOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Cluster)(nil))
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].([]Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Cluster)(nil))
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Cluster {
		return vs[0].(map[string]Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterPtrOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cluster extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'aws-quickstart-postgres:index:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }


    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.ComponentResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.availabilityZoneNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZoneNames'");
            }
            if ((!args || args.dbEngineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbEngineVersion'");
            }
            if ((!args || args.dbInstanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceClass'");
            }
            if ((!args || args.dbMasterPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbMasterPassword'");
            }
            if ((!args || args.dbMasterUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbMasterUsername'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.dbParameterGroupFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbParameterGroupFamily'");
            }
            if ((!args || args.privateSubnetID1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateSubnetID1'");
            }
            if ((!args || args.privateSubnetID2 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateSubnetID2'");
            }
            if ((!args || args.vpcID === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcID'");
            }
            inputs["availabilityZoneNames"] = args ? args.availabilityZoneNames : undefined;
            inputs["dbAutoMinorVersionUpgrade"] = (args ? args.dbAutoMinorVersionUpgrade : undefined) ?? false;
            inputs["dbBackupRetentionPeriod"] = args ? args.dbBackupRetentionPeriod : undefined;
            inputs["dbEncryptedEnabled"] = (args ? args.dbEncryptedEnabled : undefined) ?? true;
            inputs["dbEngineVersion"] = args ? args.dbEngineVersion : undefined;
            inputs["dbInstanceClass"] = args ? args.dbInstanceClass : undefined;
            inputs["dbMasterPassword"] = args?.dbMasterPassword ? pulumi.secret(args.dbMasterPassword) : undefined;
            inputs["dbMasterUsername"] = args ? args.dbMasterUsername : undefined;
            inputs["dbName"] = args ? args.dbName : undefined;
            inputs["dbParameterGroupFamily"] = args ? args.dbParameterGroupFamily : undefined;
            inputs["dbPort"] = args ? args.dbPort : undefined;
            inputs["dbSecurityGroupID"] = args ? args.dbSecurityGroupID : undefined;
            inputs["enableEventSubscription"] = (args ? args.enableEventSubscription : undefined) ?? true;
            inputs["privateSubnetID1"] = args ? args.privateSubnetID1 : undefined;
            inputs["privateSubnetID2"] = args ? args.privateSubnetID2 : undefined;
            inputs["snsNotificationEmail"] = args ? args.snsNotificationEmail : undefined;
            inputs["vpcID"] = args ? args.vpcID : undefined;
        } else {
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Cluster.__pulumiType, name, inputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * List of Availability Zone names to use to create the DB Cluster.
     */
    availabilityZoneNames: pulumi.Input<string>[];
    /**
     * Set this parameter to true if you want to enable your DB
     * instances to receive minor DB engine version upgrades
     * automatically when upgrades become available.
     */
    dbAutoMinorVersionUpgrade?: boolean;
    /**
     * The number of days to retain automatic database snapshots.
     * To disable automatic backups, set this parameter to 0. Default is 35 days
     */
    dbBackupRetentionPeriod?: number;
    /**
     * The number of days to retain automatic database snapshots.
     * To disable automatic backups, set this parameter to 0.
     */
    dbEncryptedEnabled?: pulumi.Input<boolean>;
    /**
     * The number of days to retain automatic database snapshots.
     * To disable automatic backups, set this parameter to 0.
     */
    dbEngineVersion: string;
    /**
     * The DB (compute and memory capacity) class for the database
     * instances.
     */
    dbInstanceClass: string;
    /**
     * The password for the database administrator account (8-64
     * character string)
     */
    dbMasterPassword: string;
    /**
     * The user name for the database administrator account. This is
     * an alphanumeric string of 1-16 characters. The user name
     * must start with an uppercase or lowercase letter (A-Z, a-z).
     */
    dbMasterUsername: string;
    /**
     * The name of the Aurora DB to provision. This is an
     * alphanumeric string of 5-64 characters.
     */
    dbName: string;
    /**
     * The family of the DB parameter group (e.g. aurora-postgresql11).
     */
    dbParameterGroupFamily: string;
    /**
     * The port that you want to access the database through. The DB
     * instance will listen on this port for connections. This value
     * must be in the range 1115-65535. Default is 5432
     */
    dbPort?: number;
    /**
     * The ID of the custom security group you want to use in your
     * existing VPC (e.g., sg-7f16e910).
     */
    dbSecurityGroupID?: pulumi.Input<string>;
    /**
     * Set this parameter to `false` if you want to disable Amazon
     * Aurora Cluster and Instance level event subscriptions. You
     * might want to disable it if you are testing or running
     * continuous integration (CI) processes.
     */
    enableEventSubscription?: boolean;
    /**
     * The ID of the private subnet in Availability Zone 1 in your
     * existing VPC (e.g., subnet-a0246dcd).
     */
    privateSubnetID1: pulumi.Input<string>;
    /**
     * The ID of the private subnet in Availability Zone 2 in your
     * existing VPC (e.g., subnet-b58c3d67).
     */
    privateSubnetID2: pulumi.Input<string>;
    /**
     * The email that is used to configure an SNS topic for sending
     * CloudWatch alarms and Amazon RDS event notifications. This
     * must be a valid email address. Required if enableEventSubscription is true.
     */
    snsNotificationEmail?: string;
    /**
     * The ID of your existing VPC (e.g., vpc-0343606e) where you
     * want to deploy the Aurora database.
     */
    vpcID: pulumi.Input<string>;
}
